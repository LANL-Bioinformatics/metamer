#!/usr/bin/env python

"""
metamer workflow

"""


import os
import sys
import argparse
import luigi
import itertools
dir_path = os.path.dirname(os.path.realpath(__file__))
lib_path = os.path.abspath(os.path.join(dir_path, '..'))
bin_path = os.path.join(lib_path, 'bin')
sys.path.append(lib_path)
os.environ["PATH"] += os.pathsep + bin_path
from luigi.interface import build
from metamer import parse_metainput, sketch, dist
from metamer import faqcs, miscs, cluster


def cmdline_parser():
    """
    Create an argparse instance.

    Combination of different options for this script.
    """
    class CustomFormatter(argparse.ArgumentDefaultsHelpFormatter,
                          argparse.RawDescriptionHelpFormatter):
        """For multiple formatters of argparse."""

        pass

    parser = argparse.ArgumentParser(formatter_class=CustomFormatter,
                                     prog='metamer',
                                     description="""A framework workflow for clustering metagenomes""",
                                     epilog="""
The workflow processes metagenomes within a folder through Quality Control, sketches using mash, and then
further calculates the distance, which can then be further clustered using single or average linkage agglomerative
clustering.

""")

    parser.add_argument("-t", dest="THREADS", help="""number of CPUs/threads to
                         run per task.""",
                        required=False, default=1)

    required_args = parser.add_argument_group('required arguments')

    required_args.add_argument("-c", dest="CONGIF", help="""config file.""",
                               required=True)

    parser.add_argument('--version', action='version', version='%(prog)s 0.0.0')
    return parser


def main():
    """
    Main function.

    All functions are called here.
    """
    parser = cmdline_parser()
    args = parser.parse_args()

    print("Running QC....")
    build([faqcs.RunAllQC()],local_scheduler=True, workers=1)
    print("Done.\n")

    print("Sketching.....")
    build([sketch.AllSketches()], local_scheduler=True, workers=1)
    print("Done.\n")

    print("Calculting distances...")
    build([dist.Alldist()], local_scheduler=True, workers=1)
    print("Done.\n")

    print("Clustering....")
    build([cluster.ClusterSamples()], local_scheduler=True, workers=1)
    print("Done.\n")

if __name__ == '__main__':
    main()
